{"version":3,"sources":["header/img/Avatar.svg","serverData/reqHeaders.js","sendUserInfo/sendUserInfo.js","errorsMessage/normalizeMessageForForm.js","errorsMessage/errorFromApiToForm.js","store/actions.js","errorsMessage/errorText.jsx","userForms/login/login.jsx","serverData/apiPaths.js","serverData/linksToPages.js","userForms/signup/signupSchema.js","userForms/signup/signup.jsx","loadArticles/loadSingleArticle.js","like/like.jsx","article/preview/articlePreview.jsx","loadArticles/loadArticles.js","homepage/homepage.jsx","header/HeaderLoginedUsers.jsx","header/HeaderNotLoginedUsers.jsx","header/BlogHeader.jsx","sendArticles/sendArticles.js","article/article.jsx","article/tags/tags.jsx","article/form/articleForm.jsx","article/create/createArticle.jsx","article/edit/editArticle.jsx","userForms/editProfile/editProfileSchema.js","userForms/editProfile/editProfile.jsx","App.jsx","serviceWorker.js","store/store.js","index.jsx"],"names":["module","exports","reqHeaders","headers","localStorage","getItem","Authorization","JSON","parse","token","sendUserInfo","pathApi","method","values","a","path","URL","serverUrl","normValues","stringify","user","axios","url","toString","data","response","normalizeMessageForForm","errors","Object","keys","reduce","acc","err","charAt","toUpperCase","slice","errorFromApiToForm","error","errorUnknown","status","setUser","type","setArticles","articles","setCurrentArticle","article","ErrorText","msg","gutter","justify","span","message","Login","history","className","initialValues","email","password","onSubmit","setSubmitting","setErrors","then","setItem","username","image","_","replace","catch","isSubmitting","name","render","htmlFor","as","Input","placeholder","Password","htmlType","disabled","block","to","connect","dispatch","actions","defaultProps","undefined","SignupSchema","Yup","shape","required","min","max","repeatPassword","test","ref","this","resolve","acceptTerms","value","validationSchema","Checkbox","loadSingleArticle","slug","get","Like","articlesList","useState","favorited","favCount","setFavCount","favoritesCount","toggleLike","length","currList","map","art","HeartFilled","onClick","HeartOutlined","currentArticle","title","description","tagList","createdAt","author","createdTimeAgo","time","formatDistanceToNow","parseJSON","align","tag","key","src","alt","loadArticles","articlesPerPage","currentPage","params","limit","offset","Homepage","setArticlesCount","articlesCount","setCurrentPage","useEffect","res","total","pageSize","current","onChange","page","showSizeChanger","tip","userInfo","count","HeaderLoginedUsers","userImage","logoutUser","avatar","HeaderNotLoginedUsers","Header","Layout","BlogHeader","sendArticle","Article","delCurrentArticle","currentUser","match","body","push","placement","cancelText","okText","onConfirm","event","preventDefault","Tags","form","remove","index","array","tagsLength","flex","renderTags","ArticleForm","TextArea","component","normalizeTags","tags","normalTags","filter","sendResult","setSendResult","extra","EditArticle","initValues","EditProfileSchema","normalizeValues","Content","withRouter","exact","SignUp","pathname","Boolean","window","location","hostname","defaultUser","bio","defaultArticle","updatedAt","following","isEdit","ext","__REDUX_DEVTOOLS_EXTENSION__","devtoolMiddleware","reducer","combineReducers","state","action","store","createStore","compose","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a06a2f81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Avatar.1197b293.svg\";","const reqHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8',\n  };\n  if (localStorage.getItem('userInfo')) {\n    headers.Authorization = `Token ${JSON.parse(localStorage.getItem('userInfo')).token}`;\n  }\n  return headers;\n};\n\nexport default reqHeaders;\n","import axios from 'axios';\nimport { serverUrl } from '../serverData/apiPaths';\nimport reqHeaders from '../serverData/reqHeaders';\n\nconst server = serverUrl;\n\nconst sendUserInfo = async (pathApi, method, values) => {\n  const path = new URL(pathApi, server);\n  const normValues = JSON.stringify({ user: values });\n  try {\n    const response = await axios({\n      method,\n      url: path.toString(),\n      data: normValues,\n      headers: reqHeaders(),\n    });\n    return response.data;\n  } catch ({ response }) {\n    throw response;\n  }\n};\n\nexport default sendUserInfo;\n","const normalizeMessageForForm = ({ errors }) => {\n  const errTypes = Object.keys(errors);\n\n  return errTypes.reduce(\n    (acc, err) => ({\n      ...acc,\n      [err === 'email or password' ? 'email' : err]:\n        `${err} ${errors[err][0]}`.charAt(0).toUpperCase() + `${err} ${errors[err][0]}`.slice(1),\n    }),\n    {}\n  );\n};\n\nexport default normalizeMessageForForm;\n","import normalizeMessageForForm from './normalizeMessageForForm';\n\nconst errorFromApiToForm = (error) => {\n  if (!error) return { errorUnknown: 'Sorry, something went wrong :(' };\n  switch (error.status) {\n    case 422:\n      return normalizeMessageForForm(error.data);\n    default:\n      return { errorUnknown: 'Sorry, something went wrong :(' };\n  }\n};\n\nexport default errorFromApiToForm;\n","export const SET_USER = 'SET_USER';\nexport const LOAD_ARTICLES = 'LOAD_ARTICLES';\nexport const SET_ARTICLE_COUNT = 'SET_ARTICLE_COUNT';\nexport const SET_CURRENT_ARTICLE = 'SET_CURRENT_ARTICLE';\nexport const DEL_CURRENT_ARTICLE = 'DEL_CURRENT_ARTICLE';\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\n\nexport const setUser = (user) => ({ type: SET_USER, user });\nexport const logoutUser = () => ({ type: SET_USER, user: {} });\nexport const setArticles = (articles) => ({ type: LOAD_ARTICLES, articles });\nexport const setArticlesCount = (count) => ({ type: SET_ARTICLE_COUNT, count });\nexport const setCurrentArticle = (article) => ({ type: SET_CURRENT_ARTICLE, article });\nexport const delCurrentArticle = () => ({ type: DEL_CURRENT_ARTICLE });\nexport const setCurrentPage = (page) => ({ type: SET_CURRENT_PAGE, page });\n","import React from 'react';\nimport { Alert, Col, Row } from 'antd';\n\nconst ErrorText = (msg) => {\n  return (\n    <Row gutter={[16, 36]} justify=\"center\">\n      <Col span={24}>\n        <Alert message={`${msg}`.charAt(0).toUpperCase() + `${msg}`.slice(1)} type=\"error\" />\n      </Col>\n    </Row>\n  );\n};\n\nexport default ErrorText;\n","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { connect } from 'react-redux';\nimport { Button, Row, Col, Input } from 'antd';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport sendUserInfo from '../../sendUserInfo/sendUserInfo';\nimport errorFromApiToForm from '../../errorsMessage/errorFromApiToForm';\nimport * as actions from '../../store/actions';\nimport ErrorText from '../../errorsMessage/errorText';\nimport { hrefSignup, hrefHomePage } from '../../serverData/linksToPages';\nimport { loginPath, profilePath } from '../../serverData/apiPaths';\nimport './login.scss';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => dispatch(actions.setUser(user)),\n  };\n};\n\nconst Login = ({ setUser, history }) => {\n  return (\n    <Row className=\"formWrapper\" justify=\"center\">\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n          sendUserInfo(loginPath, 'post', values)\n            .then(({ user }) => {\n              localStorage.setItem(\n                'userInfo',\n                JSON.stringify({ email: values.email, password: values.password, token: user.token }).toString()\n              );\n              sendUserInfo(`${profilePath}/${user.username}`, 'get').then(({ image }) => {\n                setUser(_.omit(user, ['token']), image);\n                history.replace(hrefHomePage);\n              });\n            })\n            .catch((error) => setErrors(errorFromApiToForm(error)));\n\n          setSubmitting(false);\n        }}\n      >\n        {({ isSubmitting, errors }) => (\n          <Form>\n            <Row className=\"form__title\" justify=\"center\">\n              Sign in\n            </Row>\n            {errors.errorUnknown && ErrorText(errors.errorUnknown)}\n            <ErrorMessage name=\"email\" render={(msg) => ErrorText(msg)} />\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <label htmlFor=\"email\" className=\"form__label\">\n                  Email address:{' '}\n                </label>\n                <Field as={Input} type=\"email\" name=\"email\" placeholder=\"Email address\" />\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <label htmlFor=\"password\" className=\"form__label\">\n                  Password:{' '}\n                </label>\n                <Field as={Input.Password} name=\"password\" placeholder=\"Password\" />\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <Button htmlType=\"submit\" type=\"primary\" disabled={isSubmitting} block className=\"submitButton\">\n                  Login\n                </Button>\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]} justify=\"center\">\n              <span className=\"form__question\">Don`t have an account?&nbsp;</span>\n              <Link to={hrefSignup}>Sign Up.</Link>\n            </Row>\n          </Form>\n        )}\n      </Formik>\n    </Row>\n  );\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  history: PropTypes.shape({}),\n  setUser: PropTypes.func.isRequired,\n};\n\nLogin.defaultProps = {\n  history: undefined,\n};\n","export const serverUrl = 'https://conduit.productionready.io';\nexport const loginPath = 'api/users/login';\nexport const signupPath = 'api/users';\nexport const articlesPath = 'api/articles';\nexport const addArticlePath = 'api/articles';\nexport const deleteArticlePath = 'api/articles';\nexport const userPath = 'api/user';\nexport const toggleArticleFavoritePath = 'api/articles';\nexport const profilePath = 'api/profiles';\n","export const hrefLogin = '/login';\nexport const hrefSignup = '/signup';\nexport const hrefCreateArcticle = '/add';\nexport const hrefHomePage = '/';\nexport const hrefArcticles = '/articles';\nexport const hrefEditArticle = '/articles';\nexport const hrefEditProfile = '/editprofile';\n","import * as Yup from 'yup';\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string().required(),\n  email: Yup.string().email().required(),\n  password: Yup.string().min(1, 'Too short, minimum 1 character').max(20, 'Too long, maximum 20 characters').required(),\n  repeatPassword: Yup.string().test(null, 'Password mismatch!', function isRepeat(repeatPassword) {\n    const ref = Yup.ref('password');\n    return repeatPassword === this.resolve(ref);\n  }),\n  acceptTerms: Yup.boolean().test('Accept', 'Accept terms required.', (value) => value),\n});\n\nexport default SignupSchema;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Button, Row, Col, Input, Checkbox } from 'antd';\nimport * as _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as actions from '../../store/actions';\nimport sendUserInfo from '../../sendUserInfo/sendUserInfo';\nimport errorFromApiToForm from '../../errorsMessage/errorFromApiToForm';\nimport ErrorText from '../../errorsMessage/errorText';\nimport '../formStyle.scss';\nimport { hrefHomePage, hrefLogin } from '../../serverData/linksToPages';\nimport { userPath, signupPath } from '../../serverData/apiPaths';\nimport SignupSchema from './signupSchema';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => dispatch(actions.setUser(user)),\n  };\n};\n\nconst SignUp = ({ setUser, history }) => {\n  return (\n    <Row className=\"formWrapper\">\n      <Formik\n        initialValues={{\n          username: '',\n          email: '',\n          password: '',\n          repeatPassword: '',\n          acceptTerms: false,\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n          sendUserInfo(signupPath, 'post', {\n            ...values,\n            image: 'https://static.productionready.io/images/smiley-cyrus.jpg',\n          })\n            .then(({ user }) => {\n              localStorage.setItem(\n                'userInfo',\n                JSON.stringify({ email: values.email, password: values.password, token: user.token }).toString()\n              );\n              sendUserInfo(userPath, 'get').then(({ user: { image } }) => {\n                setUser(_.omit({ ...user, image }, ['token']));\n                history.replace(hrefHomePage);\n              });\n            })\n            .catch((error) => setErrors(errorFromApiToForm(error)));\n          setSubmitting(false);\n        }}\n      >\n        {({ isSubmitting, errors }) => (\n          <Form>\n            <Row className=\"form__title\" justify=\"center\">\n              Create new account\n            </Row>\n            {errors.errorUnknown && ErrorText(errors.errorUnknown)}\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <label htmlFor=\"username\" className=\"form__label\">\n                  Username:{' '}\n                </label>\n                <Field as={Input} name=\"username\" placeholder=\"Username\" />\n                <ErrorMessage name=\"username\" render={(msg) => ErrorText(msg)} />\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <label htmlFor=\"email\" className=\"form__label\">\n                  Email address:{' '}\n                </label>\n                <Field as={Input} type=\"email\" name=\"email\" placeholder=\"Email address\" />\n                <ErrorMessage name=\"email\" render={(msg) => ErrorText(msg)} />\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <label htmlFor=\"password\" className=\"form__label\">\n                  Password:{' '}\n                </label>\n                <Field as={Input.Password} name=\"password\" placeholder=\"Password\" />\n                <ErrorMessage name=\"password\" render={(msg) => ErrorText(msg)} />\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <label htmlFor=\"repeatPassword\" className=\"form__label\">\n                  Repeat Password:{' '}\n                </label>\n                <Field as={Input.Password} name=\"repeatPassword\" placeholder=\"Repeat Password\" />\n                <ErrorMessage name=\"repeatPassword\" render={(msg) => ErrorText(msg)} />\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <Field as={Checkbox} name=\"acceptTerms\">\n                  <span className=\"form__label--theme_grey8\">I agree to the processing of my personal information</span>\n                </Field>\n                <ErrorMessage name=\"acceptTerms\" render={(msg) => ErrorText(msg)} />\n              </Col>\n            </Row>\n            <Row gutter={[0, 18]}>\n              <Col span={24}>\n                <Button htmlType=\"submit\" type=\"primary\" disabled={isSubmitting} block className=\"submitButton\">\n                  Create\n                </Button>\n              </Col>\n            </Row>\n            <Row justify=\"center\">\n              <span className=\"form__question\">Already have an account?&nbsp;</span>\n              <Link to={hrefLogin}>Sign In.</Link>\n            </Row>\n          </Form>\n        )}\n      </Formik>\n    </Row>\n  );\n};\n\nexport default connect(null, mapDispatchToProps)(SignUp);\n\nSignUp.propTypes = {\n  setUser: PropTypes.func.isRequired,\n  history: { ...PropTypes.object, length: PropTypes.number }.isRequired,\n};\n","import axios from 'axios';\nimport { serverUrl } from '../serverData/apiPaths';\nimport reqHeaders from '../serverData/reqHeaders';\n\nconst server = serverUrl;\n\nconst loadSingleArticle = async (pathApi, slug) => {\n  const path = new URL(`${pathApi}/${slug}`, server);\n  try {\n    const response = await axios.get(path.toString(), {\n      headers: reqHeaders(),\n    });\n    return response.data;\n  } catch ({ response }) {\n    throw response;\n  }\n};\n\nexport default loadSingleArticle;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { HeartFilled, HeartOutlined } from '@ant-design/icons';\nimport { articlesPath, toggleArticleFavoritePath } from '../serverData/apiPaths';\nimport sendUserInfo from '../sendUserInfo/sendUserInfo';\nimport loadSingleArticle from '../loadArticles/loadSingleArticle';\nimport * as actions from '../store/actions';\nimport './like.scss';\n\nconst mapStateToProps = ({ currentArticle, articlesList }) => {\n  return { currentArticle, articlesList };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentArticle: (article) => dispatch(actions.setCurrentArticle(article)),\n    setArticles: (articles) => dispatch(actions.setArticles(articles)),\n  };\n};\n\nconst Like = ({ slug, articlesList, setArticles }) => {\n  const [{ favorited, favCount }, setFavCount] = useState({});\n\n  if (favorited === undefined) {\n    loadSingleArticle(articlesPath, slug)\n      .then(({ article }) => {\n        setFavCount({ favorited: article.favorited, favCount: article.favoritesCount });\n      })\n      .catch(() => null);\n  }\n\n  const toggleLike = () => {\n    const method = favorited ? 'delete' : 'post';\n\n    sendUserInfo(`${toggleArticleFavoritePath}/${slug}/favorite`, method).then(({ article }) => {\n      if (articlesList.length) {\n        const currList = articlesList.map((art) =>\n          art.slug === slug ? { ...art, favorited: article.favorited } : art\n        );\n        setArticles(currList);\n      }\n      setFavCount({ favorited: article.favorited, favCount: article.favoritesCount });\n    });\n  };\n\n  return (\n    <>\n      {favorited ? (\n        <HeartFilled onClick={toggleLike} className=\"heart--red\" />\n      ) : (\n        <HeartOutlined onClick={toggleLike} className=\"heart--balck\" />\n      )}\n      <span className=\"favoritesCount\">{favCount}</span>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Like);\n\nLike.propTypes = {\n  articlesList: PropTypes.arrayOf(\n    PropTypes.shape({\n      slug: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      tagList: PropTypes.arrayOf(PropTypes.string),\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string,\n      favoritesCount: PropTypes.number.isRequired,\n      author: PropTypes.shape({\n        username: PropTypes.string.isRequired,\n        image: PropTypes.string,\n        bio: PropTypes.string,\n        following: PropTypes.bool.isRequired,\n      }),\n    })\n  ),\n  setArticles: PropTypes.func.isRequired,\n  slug: PropTypes.string.isRequired,\n};\n\nLike.defaultProps = {\n  articlesList: undefined,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Tag } from 'antd';\nimport { parseJSON, formatDistanceToNow } from 'date-fns';\nimport * as _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport './articlePreview.scss';\nimport { hrefArcticles } from '../../serverData/linksToPages';\nimport Like from '../../like/like';\n\nconst ArticlePreview = ({ article }) => {\n  const {\n    slug,\n    title,\n    description,\n    tagList,\n    createdAt,\n    author: { username, image },\n  } = article;\n\n  const createdTimeAgo = {\n    time: formatDistanceToNow(parseJSON(createdAt)),\n  };\n  return (\n    <Col className=\"gutter-row\" span={24}>\n      <Row className=\"articlePreview\">\n        <Col span={18}>\n          <article>\n            <Row gutter={[13, 6]} type=\"flex\" align=\"middle\">\n              <Col className=\"row-gutter\">\n                <h1 className=\"articlePreview__title\">{title}</h1>\n              </Col>\n              <Col className=\"row-gutter\">\n                <Like slug={slug} />\n              </Col>\n            </Row>\n            <Row gutter={[13, 6]}>\n              <Col className=\"row-gutter\">\n                {tagList.map((tag) => (\n                  <Tag key={_.uniqueId()}>{tag}</Tag>\n                ))}\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Link to={`${hrefArcticles}/${slug}`} className=\"articlePreview__link\">\n                  {description}\n                </Link>\n              </Col>\n            </Row>\n          </article>\n        </Col>\n        <Col span={6}>\n          <Row gutter={[12, 12]} justify=\"end\">\n            <Col className=\"row-gutter\" span={16}>\n              <Row justify=\"end\" className=\"articlePreview__username\">\n                <Col>{username}</Col>\n              </Row>\n              <Row justify=\"end\">\n                <Col>{createdTimeAgo.time}</Col>\n              </Row>\n            </Col>\n            <Col className=\"row-gutter\" span={8}>\n              <img className=\"avatar\" src={image} alt=\"Avatar\" />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Col>\n  );\n};\n\nexport default connect()(ArticlePreview);\n\nArticlePreview.propTypes = {\n  article: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    tagList: PropTypes.arrayOf(PropTypes.string),\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string,\n    favoritesCount: PropTypes.number.isRequired,\n    author: PropTypes.shape({\n      username: PropTypes.string.isRequired,\n      image: PropTypes.string,\n      bio: PropTypes.string,\n      following: PropTypes.bool.isRequired,\n    }),\n  }).isRequired,\n};\n","import axios from 'axios';\nimport { serverUrl } from '../serverData/apiPaths';\nimport reqHeaders from '../serverData/reqHeaders';\n\nconst server = serverUrl;\n\nconst loadArticles = async (articlesPerPage, currentPage, pathApi) => {\n  const path = new URL(pathApi, server);\n  try {\n    const response = await axios.get(path.toString(), {\n      headers: reqHeaders(),\n      params: {\n        limit: articlesPerPage,\n        offset: (currentPage - 1) * articlesPerPage,\n      },\n    });\n    return response.data;\n  } catch ({ response }) {\n    throw response;\n  }\n};\n\nexport default loadArticles;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Row, Col, Pagination, Spin } from 'antd';\nimport PropTypes from 'prop-types';\n\nimport ArticlePreview from '../article/preview/articlePreview';\nimport * as actions from '../store/actions';\nimport loadArticles from '../loadArticles/loadArticles';\nimport { articlesPath } from '../serverData/apiPaths';\nimport './homepage.scss';\n\nconst articlesPerPage = 10;\n\nconst mapStateToProps = ({ userInfo, articlesCount, articlesList, currentPage }) => ({\n  username: userInfo.username,\n  articlesCount,\n  articlesList,\n  currentPage,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setArticles: (articles) => dispatch(actions.setArticles(articles)),\n    setArticlesCount: (count) => dispatch(actions.setArticlesCount(count)),\n    setCurrentPage: (page) => dispatch(actions.setCurrentPage(page)),\n  };\n};\n\nconst Homepage = ({ setArticlesCount, articlesCount, setArticles, articlesList, currentPage, setCurrentPage }) => {\n  useEffect(() => {\n    loadArticles(articlesPerPage, currentPage, articlesPath).then((res) => {\n      setArticlesCount(res.articlesCount);\n      setArticles(res.articles);\n    });\n  }, [currentPage, setArticles, setArticlesCount]);\n\n  return !articlesList.length ? (\n    <Spin tip=\"Loading...\" />\n  ) : (\n    <Row justify=\"center\" className=\"articlesWrapper\" gutter={[24, 24]}>\n      {articlesList.map((article) => (\n        <ArticlePreview article={article} key={article.slug} />\n      ))}\n      <Col>\n        <Pagination\n          total={articlesCount}\n          pageSize={articlesPerPage}\n          current={currentPage}\n          onChange={(page) => setCurrentPage(page)}\n          showSizeChanger={false}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);\n\nHomepage.propTypes = {\n  setArticlesCount: PropTypes.func.isRequired,\n  articlesCount: PropTypes.number.isRequired,\n  setArticles: PropTypes.func.isRequired,\n  articlesList: PropTypes.arrayOf(\n    PropTypes.shape({\n      slug: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      tagList: PropTypes.arrayOf(PropTypes.string),\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string,\n      favoritesCount: PropTypes.number.isRequired,\n      author: PropTypes.shape({\n        username: PropTypes.string.isRequired,\n        image: PropTypes.string,\n        bio: PropTypes.string,\n        following: PropTypes.bool.isRequired,\n      }),\n    })\n  ),\n  currentPage: PropTypes.number.isRequired,\n  setCurrentPage: PropTypes.func.isRequired,\n};\n\nHomepage.defaultProps = {\n  articlesList: undefined,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Col } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { hrefCreateArcticle, hrefEditProfile } from '../serverData/linksToPages';\nimport avatar from './img/Avatar.svg';\nimport * as actions from '../store/actions';\nimport './hederLoginedUser.scss';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logoutUser: () => dispatch(actions.logoutUser()),\n  };\n};\n\nconst mapStateToProps = ({ userInfo }) => ({\n  username: userInfo.username,\n  userImage: userInfo.image,\n});\n\nconst HeaderLoginedUsers = ({ username, userImage, logoutUser }) => {\n  return (\n    <>\n      <Col>\n        <Link to={hrefCreateArcticle} className=\"header__createArcticleBtn\">\n          Create arcticle\n        </Link>\n      </Col>\n      <Col>\n        <div>\n          <Link to={hrefEditProfile} className=\"header__username\">\n            {username}\n          </Link>\n          <img src={userImage || avatar} alt=\"Avatar\" className=\"header__avatar\" />\n        </div>\n      </Col>\n      <Col>\n        <Button\n          className=\"header__logoutBtn\"\n          onClick={() => {\n            logoutUser();\n            delete localStorage.userInfo;\n          }}\n        >\n          Log out\n        </Button>\n      </Col>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderLoginedUsers);\n\nHeaderLoginedUsers.propTypes = {\n  username: PropTypes.string.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  userImage: PropTypes.string,\n};\n\nHeaderLoginedUsers.defaultProps = {\n  userImage: null,\n};\n","import React from 'react';\nimport { Col } from 'antd';\n\nimport { Link } from 'react-router-dom';\nimport { hrefLogin, hrefSignup } from '../serverData/linksToPages';\n\nconst HeaderNotLoginedUsers = () => {\n  return (\n    <>\n      <Col>\n        <Link to={hrefLogin} className=\"header__signLink\">\n          Sign in\n        </Link>\n      </Col>\n      <Col>\n        <Link to={hrefSignup} className=\"header__signupBtn\">\n          Sign up\n        </Link>\n      </Col>\n    </>\n  );\n};\nexport default HeaderNotLoginedUsers;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Layout } from 'antd';\nimport PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport HeaderLoginedUsers from './HeaderLoginedUsers';\nimport HeaderNotLoginedUsers from './HeaderNotLoginedUsers';\nimport './BlogHeader.scss';\nimport sendUserInfo from '../sendUserInfo/sendUserInfo';\nimport { loginPath, profilePath } from '../serverData/apiPaths';\nimport * as actions from '../store/actions';\n\nconst { Header } = Layout;\n\nconst mapStateToProps = ({ userInfo }) => ({\n  username: userInfo.username,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return { setUser: (user) => dispatch(actions.setUser(user)) };\n};\n\nconst BlogHeader = ({ username, setUser }) => {\n  if (localStorage.getItem('userInfo') && !username) {\n    sendUserInfo(loginPath, 'post', JSON.parse(localStorage.getItem('userInfo'))).then(({ user }) =>\n      sendUserInfo(`${profilePath}/${user.username}`, 'get').then(({ image }) => {\n        setUser(_.omit(user, ['token']), image);\n      })\n    );\n  }\n  return (\n    <Header className=\"header\">\n      <Row className=\"header__container\">\n        <Col span={12}>\n          <Row className=\"header__leftContainer\">\n            <Link to=\"/\" className=\"header__linkHome\">\n              Realworld Blog\n            </Link>\n          </Row>\n        </Col>\n        <Col span={12}>\n          <Row gutter={[19]} justify=\"end\" className=\"header__rightContainer\">\n            {username ? <HeaderLoginedUsers /> : <HeaderNotLoginedUsers />}\n          </Row>\n        </Col>\n      </Row>\n    </Header>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlogHeader);\n\nBlogHeader.propTypes = {\n  username: PropTypes.string,\n  setUser: PropTypes.func.isRequired,\n};\n\nBlogHeader.defaultProps = {\n  username: undefined,\n};\n","import axios from 'axios';\nimport { serverUrl } from '../serverData/apiPaths';\nimport reqHeaders from '../serverData/reqHeaders';\n\nconst server = serverUrl;\n\nconst sendArticle = async (pathApi, method, values) => {\n  const path = new URL(pathApi, server);\n  const normValues = JSON.stringify(values);\n  try {\n    const response = await axios({\n      method,\n      url: path.toString(),\n      data: normValues,\n      headers: reqHeaders(),\n    });\n    return response.data;\n  } catch ({ response }) {\n    throw response;\n  }\n};\n\nexport default sendArticle;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow, parseJSON } from 'date-fns';\nimport { Col, Row, Tag, Button, Spin, Popconfirm } from 'antd';\nimport { articlesPath, deleteArticlePath } from '../serverData/apiPaths';\nimport * as actions from '../store/actions';\nimport loadSingleArticle from '../loadArticles/loadSingleArticle';\nimport Like from '../like/like';\nimport { hrefEditArticle, hrefHomePage } from '../serverData/linksToPages';\nimport './article.scss';\nimport sendArticle from '../sendArticles/sendArticles';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentArticle: (article) => dispatch(actions.setCurrentArticle(article)),\n    delCurrentArticle: () => dispatch(actions.delCurrentArticle()),\n  };\n};\n\nconst mapStateToProps = ({ currentArticle, userInfo }) => {\n  return {\n    currentArticle,\n    currentUser: userInfo.username,\n  };\n};\n\nconst Article = ({\n  history,\n  setCurrentArticle,\n  delCurrentArticle,\n  currentArticle,\n  currentUser,\n  match: {\n    params: { slug },\n  },\n}) => {\n  const {\n    title,\n    description,\n    body,\n    tagList,\n    createdAt,\n    author: { username, image },\n  } = currentArticle;\n\n  useEffect(() => {\n    loadSingleArticle(articlesPath, slug)\n      .then(({ article }) => setCurrentArticle(article))\n      .catch(() => {\n        history.push(hrefHomePage);\n      });\n  }, [history, setCurrentArticle, slug]);\n  return !title ? (\n    <Spin tip=\"Loading...\" />\n  ) : (\n    <article className=\"articlesWrapper\">\n      <Row>\n        <Col className=\"article\">\n          <Row>\n            <Col span={18}>\n              <Row gutter={[13, 6]} className=\"article_header\" type=\"flex\" align=\"middle\">\n                <Col className=\"row-gutter\">\n                  <h1 className=\"article_title\">{title}</h1>\n                </Col>\n                <Col className=\"row-gutter\">\n                  <Like slug={slug} />\n                </Col>\n              </Row>\n              <Row gutter={[13, 6]}>\n                <Col className=\"row-gutter\">\n                  {tagList.map((tag) => (\n                    <Tag key={_.uniqueId()} className=\"tag\">\n                      {tag}\n                    </Tag>\n                  ))}\n                </Col>\n              </Row>\n              <Row>\n                <Col className=\"article_description\">{description}</Col>\n              </Row>\n              <Row>\n                <Col className=\"article_body\">{body}</Col>\n              </Row>\n            </Col>\n            <Col span={6}>\n              <Row gutter={[12, 12]} justify=\"end\">\n                <Col className=\"row-gutter\" span={16}>\n                  <Row justify=\"end\">\n                    <Col>{username}</Col>\n                  </Row>\n                  <Row justify=\"end\">\n                    <Col>{formatDistanceToNow(parseJSON(createdAt))}</Col>\n                  </Row>\n                </Col>\n                <Col className=\"row-gutter\" span={8}>\n                  <img className=\"avatar\" src={image} alt=\"Avatar\" />\n                </Col>\n              </Row>\n              {currentUser === username && (\n                <Row gutter={[12]} justify=\"end\">\n                  <Col>\n                    <Popconfirm\n                      placement=\"right\"\n                      cancelText=\"No\"\n                      okText=\"Yes\"\n                      title=\"Are you sure to delete this article?\"\n                      onConfirm={() => {\n                        sendArticle(`${deleteArticlePath}/${slug}`, 'delete')\n                          .then(() => delCurrentArticle())\n                          .then(() => history.push(hrefHomePage));\n                      }}\n                    >\n                      <Button className=\"article_delete\">Delete</Button>\n                    </Popconfirm>\n                  </Col>\n                  <Col>\n                    <Button\n                      className=\"article_edit\"\n                      onClick={(event) => {\n                        event.preventDefault();\n                        history.push(`${hrefEditArticle}/${slug}/edit`);\n                      }}\n                    >\n                      Edit\n                    </Button>\n                  </Col>\n                </Row>\n              )}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </article>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);\n\nArticle.propTypes = {\n  history: { ...PropTypes.object }.isRequired,\n  setCurrentArticle: PropTypes.func.isRequired,\n  delCurrentArticle: PropTypes.func.isRequired,\n  currentArticle: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    tagList: PropTypes.arrayOf(PropTypes.string),\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string,\n    favoritesCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    author: PropTypes.shape({\n      username: PropTypes.string.isRequired,\n      image: PropTypes.string,\n      bio: PropTypes.string,\n      following: PropTypes.bool.isRequired,\n    }),\n  }),\n  currentUser: PropTypes.string.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.objectOf(PropTypes.string),\n  }),\n};\n\nArticle.defaultProps = {\n  currentArticle: undefined,\n  match: undefined,\n};\n","import React from 'react';\nimport { Col, Row, Input, Button } from 'antd';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport './tags.scss';\n\nconst renderTags = (tagsLength, tag, index, remove) => {\n  return (\n    <Row gutter={[0, 16]} key={`${index}`}>\n      <Col flex={12}>\n        <Field as={Input} name={`tagList.${index}`} placeholder=\"Tag\" className=\"tag__field\" />\n      </Col>\n      <Col flex={2}>\n        <Row justify=\"center\">\n          <Button className=\"tag__btn--red\" onClick={() => remove(index)}>\n            Delete\n          </Button>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nconst Tags = ({ push, form, remove }) => {\n  const { tagList } = form.values;\n  return (\n    <Row className=\"tag\">\n      {tagList.length ? (\n        <Col span={12}>{tagList.map((tag, index, array) => renderTags(array.length, tag, index, remove))}</Col>\n      ) : null}\n      <Row gutter={[0, 18]} align=\"bottom\">\n        <Col className=\"row-gutter\">\n          <Button className=\"tag__btn--blue\" onClick={() => push('')}>\n            Add tag\n          </Button>\n        </Col>\n      </Row>\n    </Row>\n  );\n};\n\nexport default Tags;\n\nTags.propTypes = {\n  push: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n  form: PropTypes.shape({ values: PropTypes.shape({ tagList: PropTypes.arrayOf(PropTypes.string) }) }),\n};\n\nTags.defaultProps = {\n  form: undefined,\n};\n","import React from 'react';\nimport { ErrorMessage, Field, FieldArray } from 'formik';\nimport { Col, Input, Row } from 'antd';\nimport Tags from '../tags/tags';\nimport './articleForm.scss';\nimport ErrorText from '../../errorsMessage/errorText';\n\nconst ArticleForm = () => {\n  return (\n    <>\n      <Row gutter={[0, 24]}>\n        <Col className=\"gutter-row\" span={24}>\n          <label htmlFor=\"title\" className=\"article__label\">\n            Title:{' '}\n          </label>\n          <Field as={Input} name=\"title\" placeholder=\"Title\" />\n          <ErrorMessage name=\"title\" render={(msg) => ErrorText(msg)} />\n        </Col>\n      </Row>\n      <Row gutter={[0, 24]}>\n        <Col className=\"gutter-row\" span={24}>\n          <label htmlFor=\"description\" className=\"article__label\">\n            Short description:{' '}\n          </label>\n          <Field as={Input} name=\"description\" placeholder=\"Description\" />\n          <ErrorMessage name=\"description\" render={(msg) => ErrorText(msg)} />\n        </Col>\n      </Row>\n      <Row gutter={[0, 24]}>\n        <Col className=\"gutter-row\" span={24}>\n          <label htmlFor=\"body\" className=\"article__label\">\n            Text:{' '}\n          </label>\n          <Field as={Input.TextArea} name=\"body\" placeholder=\"Text\" />\n          <ErrorMessage name=\"body\" render={(msg) => ErrorText(msg)} />\n        </Col>\n      </Row>\n      <Row gutter={[0, 24]}>\n        <Col className=\"gutter-row\" span={24}>\n          <label htmlFor=\"tagList\" className=\"article__label\">\n            Tags:{' '}\n          </label>\n          <FieldArray name=\"tagList\" component={Tags} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ArticleForm;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport { Col, Row, Result, Button } from 'antd';\nimport * as _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport { Redirect } from 'react-router-dom';\nimport { addArticlePath } from '../../serverData/apiPaths';\nimport './createArticle.scss';\nimport ArticleForm from '../form/articleForm';\nimport sendArticle from '../../sendArticles/sendArticles';\nimport errorFromApiToForm from '../../errorsMessage/errorFromApiToForm';\nimport ErrorText from '../../errorsMessage/errorText';\nimport { hrefHomePage } from '../../serverData/linksToPages';\n\nconst normalizeTags = (tags) => {\n  const normalTags = tags.filter((tag) => tag.length > 0);\n  return [...normalTags];\n};\n\nconst mapStateToProps = ({ userInfo }) => {\n  return {\n    userInfo,\n  };\n};\n\nconst CreateArticle = ({ userInfo }) => {\n  const [sendResult, setSendResult] = useState('');\n\n  if (!userInfo.username && !localStorage.getItem('userInfo')) {\n    return <Redirect to={hrefHomePage} />;\n  }\n\n  const initValues = {\n    title: '',\n    description: '',\n    body: '',\n    tagList: [],\n  };\n\n  return (\n    <Row className=\"newArticle\" justify=\"center\">\n      <Col span={24}>\n        <Row justify=\"center\">\n          <h1 className=\"newArticle__title\">Create new article</h1>\n        </Row>\n        <Row justify=\"center\">\n          <Formik\n            initialValues={initValues}\n            onSubmit={(values, { setSubmitting, setErrors }) => {\n              sendArticle(addArticlePath, 'post', { article: { ...values, tags: [normalizeTags(values.tagList)] } })\n                .then((response) => {\n                  setSendResult(response);\n                })\n                .catch((error) => setErrors(errorFromApiToForm(error)));\n              setSubmitting(false);\n            }}\n          >\n            {({ isSubmitting, errors }) =>\n              sendResult ? (\n                <Result status=\"success\" extra={[<span key={_.uniqueId()}> Articale sent !</span>]} />\n              ) : (\n                <Form className=\"newArticle__form\">\n                  {errors.errorUnknown && ErrorText(errors.errorUnknown)}\n                  {ArticleForm(errors)}\n                  <Row justify=\"begin\">\n                    <Col span={8}>\n                      <Button htmlType=\"submit\" type=\"primary\" disabled={isSubmitting} block className=\"submitButton\">\n                        Send\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              )\n            }\n          </Formik>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default connect(mapStateToProps)(CreateArticle);\n\nCreateArticle.propTypes = {\n  userInfo: {\n    username: PropTypes.string,\n  }.isRequired,\n};\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport { Col, Row, Result, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport { Redirect } from 'react-router-dom';\nimport { addArticlePath } from '../../serverData/apiPaths';\nimport '../create/createArticle.scss';\nimport ArticleForm from '../form/articleForm';\nimport sendArticle from '../../sendArticles/sendArticles';\nimport errorFromApiToForm from '../../errorsMessage/errorFromApiToForm';\nimport ErrorText from '../../errorsMessage/errorText';\nimport { hrefHomePage } from '../../serverData/linksToPages';\n\nconst mapStateToProps = ({ currentArticle, userInfo }) => {\n  return {\n    currentArticle,\n    userInfo,\n  };\n};\n\nconst normalizeTags = (tags) => {\n  const normalTags = tags.filter((tag) => tag.length > 0);\n  return [...normalTags];\n};\n\nconst EditArticle = ({ currentArticle, userInfo }) => {\n  const [sendResult, setSendResult] = useState('');\n\n  if (!userInfo.username && !localStorage.getItem('userInfo')) {\n    return <Redirect to={hrefHomePage} />;\n  }\n\n  const initValues = {\n    title: currentArticle.title,\n    description: currentArticle.description,\n    body: currentArticle.body,\n    tagList: currentArticle.tagList,\n  };\n\n  return (\n    <Row className=\"newArticle\" justify=\"center\">\n      <Col span={24}>\n        <Row justify=\"center\">\n          <h1 className=\"newArticle__title\">Edit article</h1>\n        </Row>\n        <Row justify=\"center\">\n          <Formik\n            initialValues={initValues}\n            onSubmit={(values, { setSubmitting, setErrors }) => {\n              sendArticle(`${addArticlePath}/${currentArticle.slug}`, 'put', {\n                article: { ...values, tags: [normalizeTags(values.tagList)] },\n              })\n                .then((response) => {\n                  setSendResult(response);\n                })\n                .catch((error) => setErrors(errorFromApiToForm(error)));\n              setSubmitting(false);\n            }}\n          >\n            {({ isSubmitting, errors }) =>\n              sendResult ? (\n                <Result status=\"success\" extra={[<span key={_.uniqueId()}> Articale sent !</span>]} />\n              ) : (\n                <Form className=\"newArticle__form\">\n                  {errors.errorUnknown && ErrorText(errors.errorUnknown)}\n                  {ArticleForm(errors)}\n                  <Row justify=\"begin\">\n                    <Col span={8}>\n                      <Button htmlType=\"submit\" type=\"primary\" disabled={isSubmitting} block className=\"submitButton\">\n                        Send\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              )\n            }\n          </Formik>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default connect(mapStateToProps)(EditArticle);\n\nEditArticle.propTypes = {\n  currentArticle: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    tagList: PropTypes.arrayOf(PropTypes.string),\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string,\n    favoritesCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    author: PropTypes.shape({\n      username: PropTypes.string.isRequired,\n      image: PropTypes.string,\n      bio: PropTypes.string,\n      following: PropTypes.bool.isRequired,\n    }),\n  }),\n  userInfo: PropTypes.shape({\n    username: PropTypes.string,\n  }),\n};\n\nEditArticle.defaultProps = {\n  currentArticle: undefined,\n  userInfo: undefined,\n};\n","import * as Yup from 'yup';\n\nconst EditProfileSchema = Yup.object().shape({\n  username: Yup.string(),\n  email: Yup.string().email(),\n  password: Yup.string().min(8, 'Too short, minimum 8 character').max(20, 'Too long, maximum 20 characters'),\n  image: Yup.string().url(),\n});\n\nexport default EditProfileSchema;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Button, Row, Col, Input, Result } from 'antd';\nimport PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as actions from '../../store/actions';\n\nimport sendUserInfo from '../../sendUserInfo/sendUserInfo';\nimport errorFromApiToForm from '../../errorsMessage/errorFromApiToForm';\nimport ErrorText from '../../errorsMessage/errorText';\nimport '../formStyle.scss';\nimport { profilePath, userPath } from '../../serverData/apiPaths';\nimport EditProfileSchema from './editProfileSchema';\nimport { hrefEditProfile, hrefHomePage } from '../../serverData/linksToPages';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => dispatch(actions.setUser(user)),\n  };\n};\n\nconst mapStateToProps = ({ userInfo }) => {\n  return {\n    userInfo,\n  };\n};\n\nconst EditProfile = ({ userInfo, setUser }) => {\n  const [sendResult, setSendResult] = useState('');\n\n  if (!localStorage.getItem('userInfo')) {\n    return <Redirect to={hrefHomePage} />;\n  }\n\n  if (!userInfo.username) {\n    localStorage.getItem('userInfo');\n    sendUserInfo(userPath, 'get').then(({ user }) =>\n      sendUserInfo(`${profilePath}/${user.username}`, 'get').then(({ image }) => {\n        setUser(_.omit(user, ['token']), image);\n      })\n    );\n    return <Redirect to={hrefEditProfile} />;\n  }\n\n  return (\n    <Row className=\"formWrapper\" justify=\"center\">\n      <Formik\n        initialValues={{\n          username: userInfo.username,\n          email: userInfo.email,\n          password: '',\n          image: userInfo.image || '',\n        }}\n        validationSchema={EditProfileSchema}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n          const normalizeValues = _.omitBy(values, (value) => value === '');\n          if (!_.values(normalizeValues).length) {\n            setErrors({ errorUnknown: 'At least one field required.' });\n            setSubmitting(false);\n            return;\n          }\n          sendUserInfo(userPath, 'put', normalizeValues)\n            .then(({ user }) => {\n              const { password } = localStorage.getItem('userInfo');\n              localStorage.setItem(\n                'userInfo',\n                JSON.stringify({\n                  email: user.email,\n                  password: values.password || password,\n                  token: user.token,\n                }).toString()\n              );\n              setUser(_.omit(user), ['token']);\n              setSendResult(user);\n            })\n            .catch((error) => {\n              setErrors(errorFromApiToForm(error));\n            });\n          setSubmitting(false);\n        }}\n      >\n        {({ isSubmitting, errors }) =>\n          sendResult ? (\n            <Result status=\"success\" extra={[<span> Profile edited !</span>]} />\n          ) : (\n            <Form>\n              <Row className=\"form_title\" justify=\"center\">\n                Edit profile\n              </Row>\n              {errors.errorUnknown && ErrorText(errors.errorUnknown)}\n              <Row gutter={[0, 18]}>\n                <Col span={24}>\n                  <label htmlFor=\"username\" className=\"form_label\">\n                    Username:{' '}\n                  </label>\n                  <Field as={Input} name=\"username\" />\n                  <ErrorMessage name=\"username\" render={(msg) => ErrorText(msg)} />\n                </Col>\n              </Row>\n              <Row gutter={[0, 18]}>\n                <Col span={24}>\n                  <label htmlFor=\"email\" className=\"form_label\">\n                    Email address:{' '}\n                  </label>\n                  <Field as={Input} type=\"email\" name=\"email\" />\n                  <ErrorMessage name=\"email\" render={(msg) => ErrorText(msg)} />\n                </Col>\n              </Row>\n              <Row gutter={[0, 18]}>\n                <Col span={24}>\n                  <label htmlFor=\"password\" className=\"form_label\">\n                    New password:{' '}\n                  </label>\n                  <Field as={Input.Password} name=\"password\" placeholder=\"New password\" />\n                  <ErrorMessage name=\"password\" render={(msg) => ErrorText(msg)} />\n                </Col>\n              </Row>\n              <Row gutter={[0, 18]}>\n                <Col span={24}>\n                  <label htmlFor=\"image\" className=\"form_label\">\n                    Image:{' '}\n                  </label>\n                  <Field as={Input} name=\"image\" placeholder=\"Avatar image\" />\n                  <ErrorMessage name=\"image\" render={(msg) => ErrorText(msg)} />\n                </Col>\n              </Row>\n              <Row gutter={[0, 18]}>\n                <Col span={24}>\n                  <Button htmlType=\"submit\" type=\"primary\" disabled={isSubmitting} block className=\"submitButton\">\n                    Save\n                  </Button>\n                </Col>\n              </Row>\n            </Form>\n          )\n        }\n      </Formik>\n    </Row>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfile);\n\nEditProfile.propTypes = {\n  userInfo: {\n    username: PropTypes.string,\n    image: PropTypes.string,\n    email: PropTypes.string,\n    bio: PropTypes.string,\n  }.isRequired,\n  setUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport './css/App.scss';\n\nimport { Layout } from 'antd';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Login from './userForms/login/login';\nimport SignUp from './userForms/signup/signup';\nimport Homepage from './homepage/homepage';\nimport BlogHeader from './header/BlogHeader';\nimport Article from './article/article';\nimport CreateArticle from './article/create/createArticle';\nimport EditArticle from './article/edit/editArticle';\nimport EditProfile from './userForms/editProfile/editProfile';\n\nimport {\n  hrefHomePage,\n  hrefSignup,\n  hrefLogin,\n  hrefArcticles,\n  hrefCreateArcticle,\n  hrefEditArticle,\n  hrefEditProfile,\n} from './serverData/linksToPages';\n\nconst { Content } = Layout;\n\nconst App = () => {\n  return (\n    <Layout className=\"wrapper\">\n      <BlogHeader />\n      <Content>\n        <Switch>\n          <Route exact path={hrefHomePage} component={Homepage} />\n          <Route path={hrefLogin} component={Login} />\n          <Route path={hrefSignup} component={SignUp} />\n          <Route exact path={`${hrefArcticles}/:slug`} component={Article} />\n          <Route path={hrefCreateArcticle} render={() => <CreateArticle />} />\n          <Route\n            path={`${hrefEditArticle}/:slug/edit`}\n            render={({ match }) =>\n              localStorage.getItem('userInfo') ? (\n                <EditArticle match={match} />\n              ) : (\n                <Redirect\n                  to={{\n                    pathname: hrefLogin,\n                  }}\n                />\n              )\n            }\n          />\n          <Route path={hrefEditProfile} render={() => <EditProfile />} />\n        </Switch>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default withRouter(connect()(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  SET_USER,\n  LOAD_ARTICLES,\n  SET_ARTICLE_COUNT,\n  SET_CURRENT_ARTICLE,\n  DEL_CURRENT_ARTICLE,\n  SET_CURRENT_PAGE,\n} from './actions';\n\nconst defaultUser = {\n  email: '',\n  username: '',\n  bio: '',\n  image: '',\n};\n\nconst userInfo = (state = defaultUser, { type, user }) => {\n  switch (type) {\n    case SET_USER:\n      return {\n        email: user.email,\n        token: user.token,\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      };\n    default:\n      return state;\n  }\n};\n\nconst articlesList = (articles = [], action) => {\n  switch (action.type) {\n    case LOAD_ARTICLES:\n      return action.articles;\n    default:\n      return articles;\n  }\n};\n\nconst articlesCount = (count = 0, action) => {\n  switch (action.type) {\n    case SET_ARTICLE_COUNT:\n      return action.count;\n    default:\n      return count;\n  }\n};\n\nconst currentPage = (page = 1, action) => {\n  switch (action.type) {\n    case SET_CURRENT_PAGE:\n      return action.page;\n    default:\n      return page;\n  }\n};\n\nconst defaultArticle = {\n  slug: '',\n  title: '',\n  description: '',\n  body: '',\n  tagList: [],\n  createdAt: '',\n  updatedAt: '',\n  favoritesCount: '',\n  author: { username: '', image: '', bio: '', following: false },\n  isEdit: false,\n};\n\nconst currentArticle = (article = defaultArticle, action) => {\n  switch (action.type) {\n    case SET_CURRENT_ARTICLE:\n      return action.article;\n    case DEL_CURRENT_ARTICLE:\n      return defaultArticle;\n    default:\n      return article;\n  }\n};\n// eslint-disable-next-line no-underscore-dangle\nconst ext = window.__REDUX_DEVTOOLS_EXTENSION__;\nconst devtoolMiddleware = ext && ext();\n/* eslint-enable */\n\n/* eslint-disable no-underscore-dangle */ const reducer = combineReducers({\n  userInfo,\n  articlesList,\n  articlesCount,\n  currentArticle,\n  currentPage,\n});\nconst store = createStore(reducer, compose(applyMiddleware(thunk), devtoolMiddleware));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './css/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}